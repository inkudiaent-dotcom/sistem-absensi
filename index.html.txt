<script>
    // Data Storage
    let users = JSON.parse(localStorage.getItem('attendanceUsers')) || [
        { id: 1, name: 'admin', password: 'admin', email: 'admin@system.com', fullName: 'Administrator', phone: '08123456789', address: 'System Admin', shift: 'admin', profileImage: null }
    ];
    let attendanceData = JSON.parse(localStorage.getItem('attendanceData')) || [];
    let scheduleData = JSON.parse(localStorage.getItem('scheduleData')) || [];
    let currentUser = null;

    // Barcode Scanner Variables
    let currentScanType = null;
    let videoStream = null;
    let scanningInterval = null;
    const VALID_BARCODE = 'ATTENDANCE_SYSTEM_2024';

    // Utility Functions
    function saveData() {
        localStorage.setItem('attendanceUsers', JSON.stringify(users));
        localStorage.setItem('attendanceData', JSON.stringify(attendanceData));
        localStorage.setItem('scheduleData', JSON.stringify(scheduleData));
    }

    function getCurrentDateTime() {
        return new Date().toLocaleString('id-ID');
    }

    // Fungsi untuk mendapatkan tanggal hari ini dalam format ID (DD/MM/YYYY) - digunakan untuk data Absensi
    function getTodayDateIDFormat() {
        // Menggunakan Intl.DateTimeFormat untuk memastikan konsistensi DD/MM/YYYY
        const today = new Date();
        return new Intl.DateTimeFormat('id-ID', {day: '2-digit', month: '2-digit', year: 'numeric'}).format(today);
    }

    function getCurrentTime() {
        return new Date().toLocaleTimeString('id-ID');
    }

    // Fungsi untuk mendapatkan tanggal hari ini dalam format ISO (YYYY-MM-DD) - digunakan untuk data Jadwal
    function getTodayDateString() {
        return new Date().toISOString().split('T')[0];
    }

    function showMessage(message, type = 'success') {
        const messageDiv = document.createElement('div');
        messageDiv.className = `fixed top-4 left-4 right-4 p-4 rounded-2xl text-white z-50 text-center mobile-text ${type === 'success' ? 'bg-green-500' : 'bg-red-500'}`;
        messageDiv.textContent = message;
        document.body.appendChild(messageDiv);
        setTimeout(() => {
            document.body.removeChild(messageDiv);
        }, 3000);
    }

    // Page Navigation
    function showPage(pageId) {
        const pages = ['loginPage', 'forgotPasswordPage', 'registerPage', 'dashboardPage', 'profilePage', 'attendanceListPage', 'adminPanelPage', 'scheduleTablePage', 'scheduleManagerPage', 'memberSchedulePage', 'barcodeScannerPage', 'lateReportPage'];
        pages.forEach(page => {
            document.getElementById(page).classList.add('hidden');
        });
        document.getElementById(pageId).classList.remove('hidden');
        document.getElementById(pageId).classList.add('fade-in');
    }

    function showLogin() { showPage('loginPage'); }
    function showForgotPassword() { showPage('forgotPasswordPage'); }
    function showRegister() { showPage('registerPage'); }
    function showDashboard() { 
        showPage('dashboardPage'); 
        updateDashboard();
        updateDateTime();
    }
    function showProfile() { 
        showPage('profilePage'); 
        loadProfile();
    }
    function showAttendanceList() { 
        showPage('attendanceListPage'); 
        loadAttendanceList();
    }
    function showAdminPanel() { 
        showPage('adminPanelPage'); 
        loadAdminPanel();
    }
    function showScheduleTable() { 
        showPage('scheduleTablePage'); 
        initScheduleTable();
    }
    function showScheduleManager() { 
        showPage('scheduleManagerPage'); 
        loadScheduleManager();
    }
    function showMemberSchedule() { 
        showPage('memberSchedulePage'); 
        loadMemberSchedule();
    }
    function showLateReport() { 
        showPage('lateReportPage'); 
        initLateReport();
    }

    // Authentication
    document.getElementById('loginForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const name = document.getElementById('loginName').value;
        const password = document.getElementById('loginPassword').value;
        
        const user = users.find(u => u.name === name && u.password === password);
        if (user) {
            currentUser = user;
            showMessage('Login berhasil!');
            showDashboard();
        } else {
            showMessage('Nama atau password salah!', 'error');
        }
    });

    document.getElementById('forgotPasswordForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const email = document.getElementById('resetEmail').value;
        const user = users.find(u => u.email === email);
        
        if (user) {
            showMessage('Email reset password telah dikirim ke ' + email);
            showLogin();
        } else {
            showMessage('Email tidak ditemukan!', 'error');
        }
    });

    document.getElementById('registerForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const fullName = document.getElementById('regFullName').value;
        const address = document.getElementById('regAddress').value;
        const phone = document.getElementById('regPhone').value;
        const email = document.getElementById('regEmail').value;
        const password = document.getElementById('regPassword').value;
        const confirmPassword = document.getElementById('regConfirmPassword').value;
        
        if (password !== confirmPassword) {
            showMessage('Password tidak cocok!', 'error');
            return;
        }
        
        if (users.find(u => u.email === email)) {
            showMessage('Email sudah terdaftar!', 'error');
            return;
        }
        
        const newUser = {
            id: users.length + 1,
            name: fullName.toLowerCase().replace(/\s+/g, ''),
            password: password,
            email: email,
            fullName: fullName,
            phone: phone,
            address: address,
            shift: 'shift1',
            profileImage: null
        };
        
        users.push(newUser);
        saveData();
        showMessage('Akun berhasil dibuat! Silakan login.');
        showLogin();
    });

    function logout() {
        currentUser = null;
        showMessage('Logout berhasil!');
        showLogin();
    }

    // Dashboard Functions
    function updateDashboard() {
        if (!currentUser) return;
        
        document.getElementById('headerUserName').textContent = currentUser.fullName;
        document.getElementById('headerProfileImg').src = currentUser.profileImage || "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='white'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z'/%3E%3C/svg%3E";
        
        // Check today's schedule using ISO format
        const todayISO = getTodayDateString();
        const todaySchedule = scheduleData.find(s => s.userId === currentUser.id && s.date === todayISO);
        
        // Show/hide admin card based on user role
        if (currentUser.shift === 'admin') {
            document.getElementById('adminCard').classList.remove('hidden');
            // Hide attendance buttons for admin
            document.getElementById('clockInCard').classList.add('hidden');
            document.getElementById('breakCard').classList.add('hidden');
            document.getElementById('clockOutCard').classList.add('hidden');
            document.getElementById('fullTimeCard').classList.add('hidden');
            document.getElementById('memberScheduleCard').classList.add('hidden');
            document.getElementById('attendanceListCard').classList.add('hidden'); // Admin melihat dari panel
        } else {
            document.getElementById('adminCard').classList.add('hidden');
            document.getElementById('memberScheduleCard').classList.remove('hidden');
            document.getElementById('attendanceListCard').classList.remove('hidden');
            
            // Show/hide cards based on schedule for non-admin users
            if (todaySchedule && todaySchedule.shift === 'fulltime') {
                // Full time mode - hide other buttons
                document.getElementById('clockInCard').classList.add('hidden');
                document.getElementById('breakCard').classList.add('hidden');
                document.getElementById('clockOutCard').classList.add('hidden');
                document.getElementById('fullTimeCard').classList.remove('hidden');
            } else {
                // Normal mode - show all buttons except full time
                document.getElementById('clockInCard').classList.remove('hidden');
                document.getElementById('breakCard').classList.remove('hidden');
                document.getElementById('clockOutCard').classList.remove('hidden');
                document.getElementById('fullTimeCard').classList.add('hidden');
            }
        }
        
        // Update attendance status and button states
        updateAttendanceStatus();
    }

    function updateDateTime() {
        document.getElementById('currentDateTime').textContent = getCurrentDateTime();
        setTimeout(updateDateTime, 1000);
    }

    function updateAttendanceStatus() {
        const todayID = getTodayDateIDFormat(); // Menggunakan format ID untuk mencari data absensi
        const userAttendance = attendanceData.filter(a => a.userId === currentUser.id && a.date === todayID);
        
        // Reset button states
        document.getElementById('clockInBtn').disabled = false;
        document.getElementById('breakBtn').disabled = false;
        document.getElementById('clockOutBtn').disabled = false;
        document.getElementById('fullTimeBtn').disabled = false;
        
        // Reset status texts
        document.getElementById('clockInStatus').textContent = 'Belum absen masuk';
        document.getElementById('breakStatus').textContent = 'Belum istirahat';
        document.getElementById('clockOutStatus').textContent = 'Belum selesai kerja';

        if (userAttendance.length > 0) {
            const latest = userAttendance[userAttendance.length - 1];
            
            if (latest.clockIn) {
                document.getElementById('clockInStatus').textContent = `Masuk: ${latest.clockIn} ${latest.isLate ? '(Terlambat)' : ''}`;
                document.getElementById('clockInBtn').disabled = true;
            }
            
            if (latest.breakTime) {
                document.getElementById('breakStatus').textContent = `Istirahat: ${latest.breakTime}`;
                document.getElementById('breakBtn').disabled = true;
            }
            
            if (latest.clockOut) {
                document.getElementById('clockOutStatus').textContent = `Keluar: ${latest.clockOut}`;
                document.getElementById('clockOutBtn').disabled = true;
                document.getElementById('breakBtn').disabled = true;
            }
            
            if (latest.shift === 'fulltime' && latest.clockIn) {
                document.getElementById('fullTimeBtn').disabled = true;
            }
        }
    }

    // Barcode Scanner Functions
    function startBarcodeScanner(type) {
        currentScanType = type;
        showPage('barcodeScannerPage');
    }

    function startCamera() {
        navigator.mediaDevices.getUserMedia({ 
            video: { 
                facingMode: 'environment',
                width: { ideal: 1280 },
                height: { ideal: 720 }
            } 
        })
        .then(function(stream) {
            videoStream = stream;
            const video = document.getElementById('barcodeVideo');
            video.srcObject = stream;
            video.play();
            
            // Start scanning for QR codes
            scanningInterval = setInterval(scanForQRCode, 500);
            showMessage('Kamera aktif, arahkan ke barcode');
        })
        .catch(function(err) {
            showMessage('Tidak dapat mengakses kamera: ' + err.message, 'error');
        });
    }

    function scanForQRCode() {
        const video = document.getElementById('barcodeVideo');
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');
        
        if (video.readyState === video.HAVE_ENOUGH_DATA) {
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            context.drawImage(video, 0, 0, canvas.width, canvas.height);
            
            const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
            const code = jsQR(imageData.data, imageData.width, imageData.height);
            
            if (code) {
                if (code.data === VALID_BARCODE) {
                    processBarcodeSuccess();
                } else {
                    showMessage('Barcode tidak valid!', 'error');
                    closeBarcodeScanner();
                }
            }
        }
    }

    function processBarcodeSuccess() {
        closeBarcodeScanner();
        
        if (currentScanType === 'clockIn') {
            clockIn();
        } else if (currentScanType === 'break') {
            breakTime();
        }
    }

    function closeBarcodeScanner() {
        if (videoStream) {
            videoStream.getTracks().forEach(track => track.stop());
            videoStream = null;
        }
        
        if (scanningInterval) {
            clearInterval(scanningInterval);
            scanningInterval = null;
        }
        
        currentScanType = null;
        showDashboard();
    }

    function downloadBarcode() {
        if (currentUser.shift !== 'admin') {
            showMessage('Hanya admin yang dapat mengunduh barcode!', 'error');
            return;
        }
        
        // Generate QR Code
        const qr = qrcode(0, 'M');
        qr.addData(VALID_BARCODE);
        qr.make();
        
        // Create canvas and draw QR code
        const canvas = document.createElement('canvas');
        const size = 300;
        canvas.width = size;
        canvas.height = size + 60; // Extra space for text
        const ctx = canvas.getContext('2d');
        
        // White background
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // Draw QR code
        const qrSize = size - 40;
        const cellSize = qrSize / qr.getModuleCount();
        
        for (let row = 0; row < qr.getModuleCount(); row++) {
            for (let col = 0; col < qr.getModuleCount(); col++) {
                if (qr.isDark(row, col)) {
                    ctx.fillStyle = '#000000';
                    ctx.fillRect(
                        20 + col * cellSize,
                        20 + row * cellSize,
                        cellSize,
                        cellSize
                    );
                }
            }
        }
        
        // Add text
        ctx.fillStyle = '#000000';
        ctx.font = '16px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('Barcode Absensi Sistem', canvas.width / 2, canvas.height - 30);
        ctx.font = '12px Arial';
        ctx.fillText('Scan untuk absen masuk/istirahat', canvas.width / 2, canvas.height - 10);
        
        // Download
        const link = document.createElement('a');
        link.download = 'barcode-absensi.png';
        link.href = canvas.toDataURL();
        link.click();
        
        showMessage('Barcode berhasil diunduh!');
    }

    // Attendance Functions
    function clockIn() {
        const todayID = getTodayDateIDFormat(); // Format 15/10/2025 (untuk data absensi)
        const todayISO = getTodayDateString(); // Format 2025-10-15 (untuk data jadwal)
        const time = getCurrentTime();
        
        // 1. Cek Jadwal Hari Ini
        const todaySchedule = scheduleData.find(s => s.userId === currentUser.id && s.date === todayISO);

        // Penanganan Hari Libur/Off
        if (todaySchedule && todaySchedule.shift === 'off') {
            showMessage('Hari ini adalah hari libur Anda. Tidak perlu absen!', 'error');
            return;
        }

        // 2. Cek Absensi Hari Ini
        const existingAttendance = attendanceData.find(a => a.userId === currentUser.id && a.date === todayID);
        
        if (existingAttendance && existingAttendance.clockIn) {
            showMessage('Anda sudah absen masuk hari ini!', 'error');
            return;
        }
        
        // 3. Cek apakah terlambat
        const isLate = checkIfLate(time, todayISO); // Kirim tanggal ISO untuk mencari jadwal
        
        const attendance = {
            id: attendanceData.length + 1,
            userId: currentUser.id,
            userName: currentUser.fullName,
            date: todayID, // Simpan dalam format ID
            clockIn: time,
            breakTime: null,
            clockOut: null,
            // Gunakan shift dari jadwal jika ada, jika tidak, gunakan default user
            shift: (todaySchedule && todaySchedule.shift) || currentUser.shift, 
            isLate: isLate
        };
        
        attendanceData.push(attendance);
        saveData();
        
        if (isLate) {
            showMessage('Absen masuk berhasil! (Terlambat)', 'error');
        } else {
            showMessage('Absen masuk berhasil!');
        }
        updateAttendanceStatus();
    }

    function checkIfLate(currentTime, todayISO) {
        // Menggunakan todayISO untuk mencari jadwal
        const todaySchedule = scheduleData.find(s => s.userId === currentUser.id && s.date === todayISO);
        
        if (!todaySchedule || todaySchedule.shift === 'off') return false; 
        
        const [currentHour, currentMinute] = currentTime.split(':').map(Number);
        const [currentSecond] = currentTime.split(':').map(Number).slice(2);
        const currentTimeMinutes = currentHour * 60 + currentMinute + (currentSecond / 60);
        
        let expectedStartTime;
        switch(todaySchedule.shift) {
            case 'shift1':
                expectedStartTime = 7 * 60 + 30; // 07:30
                break;
            case 'shift2':
                expectedStartTime = 14 * 60 + 30; // 14:30
                break;
            case 'fulltime':
                expectedStartTime = 8 * 60; // 08:00
                break;
            default:
                return false;
        }
        
        return currentTimeMinutes > expectedStartTime;
    }

    function breakTime() {
        const todayID = getTodayDateIDFormat();
        const time = getCurrentTime();
        
        const attendance = attendanceData.find(a => a.userId === currentUser.id && a.date === todayID);
        
        if (!attendance || !attendance.clockIn) {
            showMessage('Anda harus absen masuk terlebih dahulu!', 'error');
            return;
        }
        
        if (attendance.clockOut) {
            showMessage('Anda sudah absen keluar. Tidak bisa istirahat lagi!', 'error');
            return;
        }

        if (attendance.breakTime) {
            showMessage('Anda sudah mencatat waktu istirahat!', 'error');
            return;
        }
        
        attendance.breakTime = time;
        saveData();
        showMessage('Waktu istirahat tercatat!');
        updateAttendanceStatus();
    }

    function clockOut() {
        const todayID = getTodayDateIDFormat();
        const time = getCurrentTime();
        
        const attendance = attendanceData.find(a => a.userId === currentUser.id && a.date === todayID);
        
        if (!attendance || !attendance.clockIn) {
            showMessage('Anda harus absen masuk terlebih dahulu!', 'error');
            return;
        }
        
        if (attendance.clockOut) {
            showMessage('Anda sudah absen keluar hari ini!', 'error');
            return;
        }
        
        attendance.clockOut = time;
        saveData();
        showMessage('Absen keluar berhasil!');
        updateAttendanceStatus();
    }

    function fullTimeAttendance() {
        const todayID = getTodayDateIDFormat();
        const time = getCurrentTime();
        
        const existingAttendance = attendanceData.find(a => a.userId === currentUser.id && a.date === todayID);
        
        if (existingAttendance && existingAttendance.clockIn) {
            showMessage('Anda sudah absen full time hari ini!', 'error');
            return;
        }
        
        // Cek apakah terlambat (menggunakan logika Full Time)
        const isLate = checkIfLate(time, getTodayDateString());
        
        const attendance = {
            id: attendanceData.length + 1,
            userId: currentUser.id,
            userName: currentUser.fullName,
            date: todayID,
            clockIn: time,
            breakTime: null,
            clockOut: null,
            shift: 'fulltime',
            isLate: isLate
        };
        
        attendanceData.push(attendance);
        saveData();

        if (isLate) {
            showMessage('Absen full time berhasil! (Terlambat)', 'error');
        } else {
            showMessage('Absen full time berhasil!');
        }
        updateAttendanceStatus();
    }

    // Profile Functions
    function loadProfile() {
        if (!currentUser) return;
        
        document.getElementById('profileName').value = currentUser.fullName;
        document.getElementById('profileEmail').value = currentUser.email;
        document.getElementById('profilePhone').value = currentUser.phone;
        document.getElementById('profileAddress').value = currentUser.address;
        document.getElementById('profileImg').src = currentUser.profileImage || "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z'/%3E%3C/svg%3E";
    }

    document.getElementById('profileImageInput').addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                document.getElementById('profileImg').src = e.target.result;
            };
            reader.readAsDataURL(file);
        }
    });

    function updateProfile() {
        if (!currentUser) return;
        
        currentUser.fullName = document.getElementById('profileName').value;
        currentUser.email = document.getElementById('profileEmail').value;
        currentUser.phone = document.getElementById('profilePhone').value;
        currentUser.address = document.getElementById('profileAddress').value;
        currentUser.profileImage = document.getElementById('profileImg').src;
        
        saveData();
        showMessage('Profil berhasil diperbarui!');
        updateDashboard();
    }

    // Member Schedule Functions
    function loadMemberSchedule() {
        const container = document.getElementById('memberScheduleList');
        container.innerHTML = '';
        
        const memberSchedules = scheduleData.filter(s => s.userId === currentUser.id);
        
        if (memberSchedules.length === 0) {
            container.innerHTML = '<p class="text-center text-gray-500 py-8">Belum ada jadwal yang dibuat admin</p>';
            return;
        }
        
        // Sort by date
        memberSchedules.sort((a, b) => new Date(a.date) - new Date(b.date));
        
        memberSchedules.forEach(schedule => {
            const card = document.createElement('div');
            card.className = 'bg-gray-50 rounded-2xl p-4';
            
            // Get operational hours for display
            let operationalHours = '';
            let shiftName = '';
            switch(schedule.shift) {
                case 'shift1':
                    operationalHours = '07:30 - 15:00 WIB';
                    shiftName = 'Shift 1';
                    break;
                case 'shift2':
                    operationalHours = '14:30 - 21:30 WIB';
                    shiftName = 'Shift 2';
                    break;
                case 'fulltime':
                    operationalHours = '08:00 - 21:30 WIB';
                    shiftName = 'Full Time';
                    break;
                case 'off':
                    operationalHours = 'Libur Penuh';
                    shiftName = 'Libur';
                    break;
            }
            
            const scheduleDate = new Date(schedule.date);
            const today = new Date();
            const isToday = scheduleDate.toDateString() === today.toDateString();
            const isPast = scheduleDate < today && !isToday;
            
            let statusBadge = '';
            if (schedule.shift === 'off') {
                statusBadge = '<span class="inline-block px-3 py-1 text-xs rounded-full bg-red-100 text-red-800">LIBUR</span>';
            } else if (isToday) {
                statusBadge = '<span class="inline-block px-3 py-1 text-xs rounded-full bg-green-100 text-green-800">Hari Ini</span>';
            } else if (isPast) {
                statusBadge = '<span class="inline-block px-3 py-1 text-xs rounded-full bg-gray-100 text-gray-600">Selesai</span>';
            } else {
                statusBadge = '<span class="inline-block px-3 py-1 text-xs rounded-full bg-blue-100 text-blue-800">Akan Datang</span>';
            }

            
            card.innerHTML = `
                <div class="flex justify-between items-center">
                    <div>
                        <h4 class="font-semibold text-gray-800">${scheduleDate.toLocaleDateString('id-ID', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</h4>
                        <p class="text-sm text-blue-600 font-medium">${shiftName}</p>
                        <p class="text-xs text-gray-600">${operationalHours}</p>
                    </div>
                    <div class="text-right">
                        ${statusBadge}
                    </div>
                </div>
            `;
            container.appendChild(card);
        });
    }

    // Attendance List Functions
    function loadAttendanceList() {
        const container = document.getElementById('attendanceListContainer');
        container.innerHTML = '';
        
        const todayID = getTodayDateIDFormat();
        const todayAttendance = attendanceData.filter(a => a.date === todayID);
        
        if (todayAttendance.length === 0) {
            container.innerHTML = '<p class="text-center text-gray-500 py-8">Belum ada data absensi hari ini</p>';
            return;
        }
        
        todayAttendance.forEach(attendance => {
            const user = users.find(u => u.id === attendance.userId);
            const card = document.createElement('div');
            card.className = 'bg-gray-50 rounded-2xl p-4';
            card.innerHTML = `
                <div class="flex justify-between items-center">
                    <div>
                        <h4 class="font-semibold text-gray-800">${attendance.userName}</h4>
                        <p class="text-sm text-gray-600">${user ? user.shift.toUpperCase() : 'N/A'}</p>
                        ${attendance.isLate ? '<span class="inline-block px-2 py-1 mt-1 text-xs bg-red-100 text-red-800 rounded-full">Terlambat</span>' : ''}
                    </div>
                    <div class="text-right">
                        <div class="text-xs text-gray-500">Masuk: ${attendance.clockIn || '-'}</div>
                        <div class="text-xs text-gray-500">Keluar: ${attendance.clockOut || '-'}</div>
                        <span class="inline-block px-2 py-1 text-xs rounded-full ${attendance.clockOut ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}">
                            ${attendance.clockOut ? 'Selesai' : 'Aktif'}
                        </span>
                    </div>
                </div>
            `;
            container.appendChild(card);
        });
    }

    // Schedule Table Functions
    let currentScheduleTable = [];
    let isEditingSchedule = false;

    function initScheduleTable() {
        if (currentUser.shift !== 'admin') return;
        
        // Set default dates (next 7 days)
        const today = new Date();
        const nextWeek = new Date();
        nextWeek.setDate(today.getDate() + 6);
        
        document.getElementById('scheduleStartDate').value = getTodayDateString();
        document.getElementById('scheduleEndDate').value = nextWeek.toISOString().split('T')[0];
    }

    function generateScheduleTable() {
        const startDate = document.getElementById('scheduleStartDate').value;
        const endDate = document.getElementById('scheduleEndDate').value;
        
        if (!startDate || !endDate) {
            showMessage('Harap pilih tanggal mulai dan selesai!', 'error');
            return;
        }
        
        if (new Date(startDate) > new Date(endDate)) {
            showMessage('Tanggal mulai tidak boleh lebih besar dari tanggal selesai!', 'error');
            return;
        }
        
        const container = document.getElementById('scheduleTableContainer');
        const members = users.filter(u => u.shift !== 'admin');
        
        // Generate date range
        const dates = [];
        const current = new Date(startDate);
        const end = new Date(endDate);
        
        while (current <= end) {
            dates.push(new Date(current).toISOString().split('T')[0]);
            current.setDate(current.getDate() + 1);
        }
        
        // Create table
        let tableHTML = `
            <table class="w-full bg-white rounded-2xl overflow-hidden shadow-lg text-sm">
                <thead class="bg-purple-600 text-white">
                    <tr>
                        <th class="px-3 py-3 text-left font-semibold">Nama</th>
        `;
        
        dates.forEach(date => {
            const dateObj = new Date(date);
            const dayName = dateObj.toLocaleDateString('id-ID', { weekday: 'short' });
            const dayNum = dateObj.getDate();
            tableHTML += `<th class="px-2 py-3 text-center font-semibold min-w-20">${dayName}<br>${dayNum}</th>`;
        });
        
        tableHTML += `</tr></thead><tbody>`;
        
        // Initialize current schedule table
        currentScheduleTable = [];
        
        members.forEach((member, memberIndex) => {
            tableHTML += `<tr class="border-b border-gray-100 ${memberIndex % 2 === 0 ? 'bg-gray-50' : 'bg-white'}">`;
            tableHTML += `<td class="px-3 py-3 font-medium text-gray-800">${member.fullName}</td>`;
            
            const memberSchedule = { userId: member.id, userName: member.fullName, dates: {} };
            
            dates.forEach(date => {
                // Check if schedule already exists
                const existingSchedule = scheduleData.find(s => s.userId === member.id && s.date === date);
                const currentValue = existingSchedule ? existingSchedule.shift : '';
                
                memberSchedule.dates[date] = currentValue;
                
                tableHTML += `
                    <td class="px-2 py-2 text-center">
                        <select class="w-full px-1 py-1 text-xs border-0 rounded bg-gray-100 focus:outline-none focus:ring-1 focus:ring-purple-500" 
                                onchange="updateScheduleCell(${member.id}, '${date}', this.value)">
                            <option value="">-</option>
                            <option value="shift1" ${currentValue === 'shift1' ? 'selected' : ''}>S1</option>
                            <option value="shift2" ${currentValue === 'shift2' ? 'selected' : ''}>S2</option>
                            <option value="fulltime" ${currentValue === 'fulltime' ? 'selected' : ''}>FT</option>
                            <option value="off" ${currentValue === 'off' ? 'selected' : ''}>Libur</option>
                        </select>
                    </td>
                `;
            });
            
            currentScheduleTable.push(memberSchedule);
            tableHTML += `</tr>`;
        });
        
        tableHTML += `</tbody></table>`;
        
        // Legend
        tableHTML += `
            <div class="mt-4 bg-gray-50 rounded-xl p-3">
                <h5 class="font-semibold text-gray-800 mb-2 text-sm">Keterangan:</h5>
                <div class="grid grid-cols-2 gap-2 text-xs text-gray-600">
                    <div>• S1: Shift 1 (07:30-15:00)</div>
                    <div>• S2: Shift 2 (14:30-21:30)</div>
                    <div>• FT: Full Time (08:00-21:30)</div>
                    <div>• Libur: Tidak bekerja</div>
                </div>
            </div>
        `;
        
        container.innerHTML = tableHTML;
        document.getElementById('scheduleTableActions').classList.remove('hidden');
    }

    function updateScheduleCell(userId, date, shift) {
        const memberSchedule = currentScheduleTable.find(m => m.userId === userId);
        if (memberSchedule) {
            memberSchedule.dates[date] = shift;
        }
    }

    function saveScheduleTable() {
        let savedCount = 0;
        let updatedCount = 0;
        
        currentScheduleTable.forEach(memberSchedule => {
            Object.keys(memberSchedule.dates).forEach(date => {
                const shift = memberSchedule.dates[date];
                
                const existingIndex = scheduleData.findIndex(s => s.userId === memberSchedule.userId && s.date === date);
                
                if (shift && shift !== '') { // Hanya simpan/update jika ada shift yang dipilih
                    
                    if (existingIndex > -1) {
                        // Update existing schedule
                        scheduleData[existingIndex].shift = shift;
                        updatedCount++;
                    } else {
                        // Create new schedule
                        const newSchedule = {
                            id: scheduleData.length + 1,
                            userId: memberSchedule.userId,
                            userName: memberSchedule.userName,
                            date: date,
                            shift: shift
                        };
                        scheduleData.push(newSchedule);
                        savedCount++;
                    }
                } else {
                    // Hapus jadwal jika shift dikosongkan/tidak dipilih
                    if (existingIndex > -1) {
                        scheduleData.splice(existingIndex, 1);
                    }
                }
            });
        });
        
        saveData();
        showMessage(`Jadwal berhasil disimpan! (${savedCount} baru, ${updatedCount} diperbarui)`);
        isEditingSchedule = false;
    }

    function editScheduleTable() {
        isEditingSchedule = true;
        showMessage('Mode edit aktif. Ubah jadwal lalu klik Simpan Jadwal.');
    }

    // Late Report Functions
    function initLateReport() {
        if (currentUser.shift !== 'admin') return;
        
        // Set default to current month
        const today = new Date();
        const currentMonth = today.toISOString().slice(0, 7);
        document.getElementById('lateReportMonth').value = currentMonth;
    }

    function generateLateReport() {
        const selectedMonth = document.getElementById('lateReportMonth').value;
        if (!selectedMonth) {
            showMessage('Harap pilih bulan!', 'error');
            return;
        }
        
        const container = document.getElementById('lateReportResults');
        container.innerHTML = '';
        
        // Get all members
        const members = users.filter(u => u.shift !== 'admin');
        
        if (members.length === 0) {
            container.innerHTML = '<p class="text-center text-gray-500 py-4">Tidak ada anggota</p>';
            return;
        }
        
        // Calculate late attendance for each member
        const lateReports = members.map(member => {
            // Ubah format absensi DD/MM/YYYY menjadi YYYY-MM-DD untuk perbandingan bulan yang benar
            const memberAttendance = attendanceData.filter(a => {
                if (!a.date) return false;
                const [day, month, year] = a.date.split('/');
                const isoDate = `${year}-${month}-${day}`; // YYYY-MM-DD
                
                return a.userId === member.id && 
                       isoDate.startsWith(selectedMonth) &&
                       a.isLate === true;
            });
            
            return {
                member: member,
                lateCount: memberAttendance.length,
                lateDates: memberAttendance.map(a => a.date)
            };
        });
        
        // Sort by late count (highest first)
        lateReports.sort((a, b) => b.lateCount - a.lateCount);
        
        // Display results
        lateReports.forEach(report => {
            const card = document.createElement('div');
            card.className = `rounded-2xl p-4 ${report.lateCount > 0 ? 'bg-red-50 border border-red-200' : 'bg-green-50 border border-green-200'}`;
            
            card.innerHTML = `
                <div class="flex justify-between items-center mb-2">
                    <h4 class="font-semibold ${report.lateCount > 0 ? 'text-red-800' : 'text-green-800'}">${report.member.fullName}</h4>
                    <span class="px-3 py-1 rounded-full text-sm font-medium ${report.lateCount > 0 ? 'bg-red-200 text-red-800' : 'bg-green-200 text-green-800'}">
                        ${report.lateCount} kali terlambat
                    </span>
                </div>
                ${report.lateCount > 0 ? `
                    <div class="text-sm text-red-600">
                        <strong>Tanggal terlambat:</strong><br>
                        ${report.lateDates.join(', ')}
                    </div>
                ` : `
                    <div class="text-sm text-green-600">
                        Tidak ada keterlambatan bulan ini
                    </div>
                `}
            `;
            
            container.appendChild(card);
        });
        
        // Summary
        const totalLate = lateReports.reduce((sum, report) => sum + report.lateCount, 0);
        const membersWithLate = lateReports.filter(report => report.lateCount > 0).length;
        
        const summaryCard = document.createElement('div');
        summaryCard.className = 'bg-blue-50 rounded-2xl p-4 border border-blue-200';
        summaryCard.innerHTML = `
            <h4 class="font-semibold text-blue-800 mb-2">Ringkasan Bulan ${selectedMonth}</h4>
            <div class="text-sm text-blue-700 space-y-1">
                <div>• Total keterlambatan: ${totalLate} kali</div>
                <div>• Anggota yang terlambat: ${membersWithLate} dari ${members.length} anggota</div>
                <div>• Tingkat kedisiplinan: ${members.length > 0 ? Math.round(((members.length - membersWithLate) / members.length) * 100) : 0}%</div>
            </div>
        `;
        
        container.insertBefore(summaryCard, container.firstChild);
    }

    // Schedule Manager Functions
    function loadScheduleManager() {
        const container = document.getElementById('scheduleManagerList');
        container.innerHTML = '';
        
        // Sort schedules by date
        const sortedSchedules = scheduleData.sort((a, b) => new Date(b.date) - new Date(a.date)); // Newest first
        
        if (sortedSchedules.length === 0) {
            container.innerHTML = '<p class="text-center text-gray-500 py-4">Belum ada jadwal</p>';
            return;
        }
        
        sortedSchedules.forEach(schedule => {
            const card = document.createElement('div');
            card.className = 'bg-gray-50 rounded-2xl p-4';
            
            // Get operational hours for display
            let operationalHours = '';
            switch(schedule.shift) {
                case 'shift1':
                    operationalHours = '07:30 - 15:00';
                    break;
                case 'shift2':
                    operationalHours = '14:30 - 21:30';
                    break;
                case 'fulltime':
                    operationalHours = '08:00 - 21:30';
                    break;
                case 'off':
                    operationalHours = 'Libur';
                    break;
            }

            const scheduleDate = new Date(schedule.date).toLocaleDateString('id-ID', { weekday: 'long', day: 'numeric', month: 'long', year: 'numeric' });
            
            card.innerHTML = `
                <div class="flex justify-between items-center">
                    <div>
                        <h4 class="font-semibold text-gray-800">${schedule.userName}</h4>
                        <p class="text-sm text-gray-600">${scheduleDate}</p>
                        <p class="text-xs text-blue-600">${schedule.shift.toUpperCase()} (${operationalHours})</p>
                    </div>
                    <button onclick="deleteSchedule(${schedule.id})" class="text-red-600 hover:text-red-800 text-sm">
                        Hapus
                    </button>
                </div>
            `;
            container.appendChild(card);
        });
    }

    function deleteSchedule(scheduleId) {
        const index = scheduleData.findIndex(s => s.id === scheduleId);
        if (index > -1) {
            scheduleData.splice(index, 1);
            saveData();
            showMessage('Jadwal berhasil dihapus!');
            loadScheduleManager();
        }
    }

    // Admin Functions
    function loadAdminPanel() {
        if (currentUser.shift !== 'admin') return;
        
        loadUserManagement();
        loadAdminAttendanceData();
    }

    function loadUserManagement() {
        const container = document.getElementById('userManagementList');
        container.innerHTML = '';
        
        users.filter(u => u.shift !== 'admin').forEach(user => {
            const card = document.createElement('div');
            card.className = 'bg-gray-50 rounded-2xl p-4';
            card.innerHTML = `
                <div class="flex justify-between items-center mb-3">
                    <div>
                        <h4 class="font-semibold text-gray-800">${user.fullName}</h4>
                        <p class="text-sm text-gray-600">${user.email}</p>
                    </div>
                    <button onclick="deleteUser(${user.id})" class="text-red-600 hover:text-red-800 text-sm">
                        Hapus
                    </button>
                </div>
                <select onchange="changeUserShift(${user.id}, this.value)" class="w-full px-3 py-2 border-0 rounded-xl bg-white focus:outline-none focus:ring-2 focus:ring-purple-500 text-sm">
                    <option value="shift1" ${user.shift === 'shift1' ? 'selected' : ''}>Shift 1</option>
                    <option value="shift2" ${user.shift === 'shift2' ? 'selected' : ''}>Shift 2</option>
                    <option value="fulltime" ${user.shift === 'fulltime' ? 'selected' : ''}>Full Time</option>
                </select>
            `;
            container.appendChild(card);
        });
    }

    function loadAdminAttendanceData() {
        const container = document.getElementById('adminAttendanceList');
        container.innerHTML = '';
        
        if (attendanceData.length === 0) {
            container.innerHTML = '<p class="text-center text-gray-500 py-4">Belum ada data absensi</p>';
            return;
        }
        
        // Sort by date (newest first)
        const sortedAttendance = [...attendanceData].sort((a, b) => {
            // Konversi tanggal ID (DD/MM/YYYY) ke ISO (YYYY-MM-DD) untuk perbandingan yang benar
            const convertToISO = (dateStr) => {
                if (!dateStr) return 0;
                const parts = dateStr.split('/');
                return new Date(parts[2], parts[1] - 1, parts[0]);
            };
            return convertToISO(b.date) - convertToISO(a.date);
        });
        
        sortedAttendance.forEach(attendance => {
            const card = document.createElement('div');
            card.className = `rounded-2xl p-4 ${attendance.isLate ? 'bg-red-50 border border-red-200' : 'bg-gray-50'}`;
            const totalHours = calculateWorkHours(attendance.clockIn, attendance.clockOut);
            card.innerHTML = `
                <div class="flex justify-between items-center">
                    <div>
                        <h4 class="font-semibold ${attendance.isLate ? 'text-red-800' : 'text-gray-800'}">${attendance.userName}</h4>
                        <p class="text-sm text-gray-600">${attendance.date}</p>
                        ${attendance.isLate ? '<span class="inline-block px-2 py-1 text-xs bg-red-200 text-red-800 rounded-full">Terlambat</span>' : ''}
                    </div>
                    <div class="text-right text-sm text-gray-600">
                        <div>Masuk: ${attendance.clockIn || '-'}</div>
                        <div>Keluar: ${attendance.clockOut || '-'}</div>
                        <div>Total: ${totalHours}</div>
                    </div>
                </div>
            `;
            container.appendChild(card);
        });
    }

    function changeUserShift(userId, newShift) {
        const user = users.find(u => u.id === userId);
        if (user) {
            user.shift = newShift;
            saveData();
            showMessage(`Shift ${user.fullName} berhasil diubah ke ${newShift}`);
        }
    }

    function deleteUser(userId) {
        const userIndex = users.findIndex(u => u.id === userId);
        if (userIndex > -1) {
            const userName = users[userIndex].fullName;
            users.splice(userIndex, 1);
            attendanceData = attendanceData.filter(a => a.userId !== userId);
            scheduleData = scheduleData.filter(s => s.userId !== userId);
            saveData();
            showMessage(`User ${userName} berhasil dihapus`);
            loadUserManagement();
            loadAdminAttendanceData();
        }
    }

    function calculateWorkHours(clockIn, clockOut) {
        if (!clockIn || !clockOut) return '-';
        
        // Time format is HH:MM:SS, only need HH and MM for calculation
        const [inHour, inMinute] = clockIn.split(':').map(Number);
        const [outHour, outMinute] = clockOut.split(':').map(Number);
        
        const inTime = inHour * 60 + inMinute;
        const outTime = outHour * 60 + outMinute;
        
        const diffMinutes = outTime - inTime;
        
        // Handle case where clockOut is on the next day (e.g., overnight shifts)
        const totalMinutes = diffMinutes >= 0 ? diffMinutes : diffMinutes + (24 * 60);

        const hours = Math.floor(totalMinutes / 60);
        const minutes = totalMinutes % 60;
        
        return `${hours}j ${minutes}m`;
    }

    // Export Functions
    function exportToExcel() {
        const ws = XLSX.utils.json_to_sheet(attendanceData.map(a => ({
            Tanggal: a.date,
            Nama: a.userName,
            'Jam Masuk': a.clockIn || '-',
            Istirahat: a.breakTime || '-',
            'Jam Keluar': a.clockOut || '-',
            Shift: a.shift,
            'Terlambat': a.isLate ? 'Ya' : 'Tidak',
            'Total Jam': calculateWorkHours(a.clockIn, a.clockOut)
        })));
        
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'Data Absensi');
        XLSX.writeFile(wb, 'data-absensi.xlsx');
        showMessage('Data berhasil diekspor ke Excel!');
    }

    function exportToPDF() {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();
        
        doc.text('Data Absensi', 20, 20);
        
        let y = 40;
        attendanceData.forEach(a => {
            doc.text(`${a.date} - ${a.userName} - ${a.clockIn || '-'} - ${a.clockOut || '-'}`, 20, y);
            y += 10;
        });
        
        doc.save('data-absensi.pdf');
        showMessage('Data berhasil diekspor ke PDF!');
    }

    // Initialize
    showLogin();
</script>
